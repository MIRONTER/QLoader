<UserControl xmlns="https://github.com/avaloniaui"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:vm="using:QSideloader.ViewModels"
             xmlns:views="clr-namespace:QSideloader.Views"
             xmlns:i="clr-namespace:Avalonia.Xaml.Interactivity;assembly=Avalonia.Xaml.Interactivity"
             xmlns:ia="clr-namespace:Avalonia.Xaml.Interactions.Core;assembly=Avalonia.Xaml.Interactions"
             xmlns:system="clr-namespace:System;assembly=System.Runtime"
             xmlns:p="clr-namespace:QSideloader.Properties"
             xmlns:converters="clr-namespace:QSideloader.Converters"
             xmlns:controls="clr-namespace:QSideloader.Controls"
             xmlns:models="clr-namespace:QSideloader.Models"
             mc:Ignorable="d" d:DesignWidth="1130" d:DesignHeight="450"
             x:Class="QSideloader.Views.Pages.InstalledGamesView"
             AttachedToVisualTree="Visual_OnAttachedToVisualTree"
             DetachedFromVisualTree="Visual_OnDetachedFromVisualTree"
             x:DataType="vm:InstalledGamesViewModel">
    <UserControl.Resources>
        <converters:UpdateStatusStringValueConverter x:Key="UpdateStatusStringFromInstalledGame" />
        <converters:GameSizeValueConverter x:Key="GameSizeFromMBytesInt" />
    </UserControl.Resources>
    <Design.DataContext>
        <vm:InstalledGamesViewModel />
    </Design.DataContext>
    <Grid RowDefinitions="Auto,*" IsEnabled="{Binding IsDeviceConnected}">
        <StackPanel x:Name="ButtonPanel"
                    Grid.Row="0"
                    Orientation="Horizontal"
                    Spacing="12" Margin="8"
                    HorizontalAlignment="Right">
            <Button x:Name="UpdateAllButton"
                    Command="{Binding UpdateAll}" ToolTip.Tip="{x:Static p:Resources.UpdateAllGamesTooltip}"
                    Content="{x:Static p:Resources.UpdateAllButton}" />
            <Button x:Name="UpdateButton"
                    Command="{Binding Update}" ToolTip.Tip="{x:Static p:Resources.UpdateSelectedGamesTooltip}"
                    Content="{x:Static p:Resources.UpdateSelectedButton}" />
            <Button x:Name="BackupButton"
                    ToolTip.Tip="{x:Static p:Resources.BackupSelectedGamesTooltip}"
                    Content="{x:Static p:Resources.BackupSelectedButton}">
                <Button.Flyout>
                    <Flyout Placement="Bottom">
                        <StackPanel>
                            <TextBlock x:Name="BackupPartsSelectPrompt"
                                       Text="{x:Static p:Resources.BackupPartsSelectionPrompt}" />
                            <CheckBox x:Name="BackupAppFilesCheckBox"
                                      IsChecked="{Binding ManualBackupAppFiles}"
                                      Content="{x:Static p:Resources.BackupPartsSelectionApplicationFiles}" />
                            <CheckBox x:Name="BackupAppDataCheckBox"
                                      IsChecked="{Binding ManualBackupData}"
                                      Content="{x:Static p:Resources.BackupPartsSelectionApplicationData}" />
                            <Button x:Name="BackupConfirmButton"
                                    Margin="0,6,0,0" Content="{x:Static p:Resources.BackupConfirmationButton}">
                                <i:Interaction.Behaviors>
                                    <ia:EventTriggerBehavior EventName="Click">
                                        <ia:InvokeCommandAction Command="{Binding Backup}" />
                                        <ia:CallMethodAction TargetObject="{Binding $parent[Button].Flyout}"
                                                             MethodName="Hide" />
                                    </ia:EventTriggerBehavior>
                                </i:Interaction.Behaviors>
                            </Button>
                        </StackPanel>
                    </Flyout>
                </Button.Flyout>
            </Button>
            <Button x:Name="UninstallButton"
                    ToolTip.Tip="{x:Static p:Resources.UninstallSelectedGamesTooltip}"
                    Content="{x:Static p:Resources.UninstallSelectedButton}">
                <Button.Flyout>
                    <Flyout Placement="Bottom">
                        <StackPanel>
                            <TextBlock x:Name="UninstallConfirmText"
                                       Text="{x:Static p:Resources.UninstallGamesConfirmation}" />
                            <CheckBox x:Name="SkipBackupCheckBox"
                                      IsChecked="{Binding SkipAutoBackup}" Content="{x:Static p:Resources.SkipBackup}" />
                            <Button x:Name="UninstallConfirmButton"
                                    Margin="0,6,0,0" Content="{x:Static p:Resources.UninstallGamesConfirmationButton}">
                                <i:Interaction.Behaviors>
                                    <ia:EventTriggerBehavior EventName="Click">
                                        <ia:InvokeCommandAction Command="{Binding Uninstall}" />
                                        <ia:CallMethodAction TargetObject="{Binding $parent[Button].Flyout}"
                                                             MethodName="Hide" />
                                    </ia:EventTriggerBehavior>
                                </i:Interaction.Behaviors>
                            </Button>
                        </StackPanel>
                    </Flyout>
                </Button.Flyout>
            </Button>
            <Button x:Name="RefreshButton"
                    Command="{Binding Refresh}" IsEnabled="{Binding !IsBusy}"
                    ToolTip.Tip="{x:Static p:Resources.RefreshInstalledGamesTooltip}"
                    Content="{x:Static p:Resources.RefreshListButton}">
                <Button.CommandParameter>
                    <system:Boolean>True</system:Boolean>
                </Button.CommandParameter>
            </Button>
        </StackPanel>
        <!-- ReSharper disable Xaml.BindingWithContextNotResolved -->
        <controls:CustomDataGrid Grid.Row="1" x:Name="InstalledGamesDataGrid" x:DataType="models:InstalledGame"
                                 ItemsSource="{Binding (vm:InstalledGamesViewModel).InstalledGames}"
                                 AutoGenerateColumns="False" CanUserResizeColumns="True"
                                 DoubleTapped="InstalledGamesDataGrid_OnDoubleTapped"
                                 PointerReleased="InstalledGamesDataGrid_OnPointerReleased"
                                 EnterKeyDown="InstalledGamesDataGrid_OnEnterKeyDown">
            <DataGrid.Columns>
                <DataGridTemplateColumn Width="52"
                                        IsReadOnly="False"
                                        CanUserResize="False"
                                        IsVisible="{Binding (vm:InstalledGamesViewModel).MultiSelectEnabled}">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate x:DataType="models:InstalledGame">
                            <CheckBox IsChecked="{Binding IsSelected}" Margin="16,0,0,0" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTextColumn Binding="{Binding GameName}" Header="{x:Static p:Resources.GameNameHeader}"
                                    Width="auto" IsReadOnly="True" />
                <DataGridTextColumn Header="{x:Static p:Resources.InstalledVersionHeader}"
                                    MaxWidth="300" Width="auto" IsReadOnly="True">
                    <DataGridTextColumn.Binding>
                        <MultiBinding StringFormat="{}{0} ({1})">
                            <Binding Path="InstalledVersionName" />
                            <Binding Path="InstalledVersionCode" />
                        </MultiBinding>
                    </DataGridTextColumn.Binding>
                </DataGridTextColumn>
                <DataGridTextColumn Binding="{Binding ReleaseName}"
                                    Header="{x:Static p:Resources.LatestReleaseNameHeader}"
                                    Width="auto" IsReadOnly="True" />
                <DataGridTextColumn Binding="{Binding GameSize, Mode=OneWay, Converter={StaticResource GameSizeFromMBytesInt}}"
                                    Header="{x:Static p:Resources.GameSizeHeader}"
                                    Width="auto" IsReadOnly="True" />
                <DataGridTextColumn
                    Binding="{Binding ., Mode=OneWay, Converter={StaticResource UpdateStatusStringFromInstalledGame}}"
                    Header="{x:Static p:Resources.UpdateStatusHeader}"
                    Width="auto" IsReadOnly="True" SortMemberPath="IsUpdateAvailable" />
            </DataGrid.Columns>
            <DataGrid.Resources>
                <!-- ReSharper disable Xaml.RedundantResource -->
                <SolidColorBrush x:Key="DataGridCellFocusVisualPrimaryBrush">Transparent</SolidColorBrush>
                <SolidColorBrush x:Key="DataGridCellFocusVisualSecondaryBrush">Transparent</SolidColorBrush>
                <!-- ReSharper restore Xaml.RedundantResource -->
            </DataGrid.Resources>
        </controls:CustomDataGrid>
        <views:LoadingProgressRingView Grid.Row="0" Grid.RowSpan="2"
                                       IsVisible="{Binding IsBusy}" />
    </Grid>
</UserControl>